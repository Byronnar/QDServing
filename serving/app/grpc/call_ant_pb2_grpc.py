# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import app.grpc.call_ant_pb2 as call__ant__pb2


class GreeterStub(object):
  """The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SendData = channel.unary_unary(
        '/callant.Greeter/SendData',
        request_serializer=call__ant__pb2.AntRequest.SerializeToString,
        response_deserializer=call__ant__pb2.AntReply.FromString,
        )


class GreeterServicer(object):
  """The greeting service definition.
  """

  def SendData(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SendData': grpc.unary_unary_rpc_method_handler(
          servicer.SendData,
          request_deserializer=call__ant__pb2.AntRequest.FromString,
          response_serializer=call__ant__pb2.AntReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'callant.Greeter', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
